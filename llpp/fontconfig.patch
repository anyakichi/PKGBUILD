diff -ur llpp-1beb003.orig/link.c llpp-1beb003/link.c
--- llpp-1beb003.orig/link.c	2016-05-08 03:41:44.000000000 +0900
+++ llpp-1beb003/link.c	2016-09-02 19:42:09.303002026 +0900
@@ -4625,6 +4625,97 @@
     free (buf);
     return font;
 }
+
+static fz_font *fc_load_system_font_func_cjk (fz_context *ctx,
+					      const char *name,
+					      int ros,
+					      int UNUSED_ATTR serif)
+{
+    char *buf;
+    size_t i, size;
+    fz_font *font;
+    FcChar8 *path;
+    FcResult result;
+    FcPattern *pat, *pat1;
+
+    lprintf ("looking up %s ros:%d serif:%d\n",
+             name, ros, serif);
+    if (!fc.inited) {
+        fc.inited = 1;
+        fc.config = FcInitLoadConfigAndFonts ();
+        if (!fc.config) {
+            lprintf ("FcInitLoadConfigAndFonts failed\n");
+            return NULL;
+        }
+    }
+    if (!fc.config) return NULL;
+
+    size = strlen (name);
+    size += sizeof (":lang=ja") - 1;
+    size += 1;
+
+    buf = malloc (size);
+    if (!buf) {
+        err (1, "malloc %zu failed", size);
+    }
+
+    strcpy (buf, name);
+    switch (ros) {
+    case FZ_ADOBE_CNS_1:
+    case FZ_ADOBE_GB_1:
+	    strcat (buf, ":lang=zh");
+	    break;
+    case FZ_ADOBE_JAPAN_1:
+	    strcat (buf, ":lang=ja");
+	    break;
+    case FZ_ADOBE_KOREA_1:
+	    strcat (buf, ":lang=ko");
+	    break;
+    }
+    for (i = 0; i < size; ++i) {
+        if (buf[i] == ',' || buf[i] == '-') buf[i] = ':';
+    }
+
+    lprintf ("fcbuf=%s\n", buf);
+    pat = FcNameParse ((FcChar8 *) buf);
+    if (!pat) {
+        printd ("emsg FcNameParse failed\n");
+        free (buf);
+        return NULL;
+    }
+
+    if (!FcConfigSubstitute (fc.config, pat, FcMatchPattern)) {
+        printd ("emsg FcConfigSubstitute failed\n");
+        free (buf);
+        return NULL;
+    }
+    FcDefaultSubstitute (pat);
+
+    pat1 = FcFontMatch (fc.config, pat, &result);
+    if (!pat1) {
+        printd ("emsg FcFontMatch failed\n");
+        FcPatternDestroy (pat);
+        free (buf);
+        return NULL;
+    }
+
+    if (FcPatternGetString (pat1, FC_FILE, 0, &path) != FcResultMatch) {
+        printd ("emsg FcPatternGetString failed\n");
+        FcPatternDestroy (pat);
+        FcPatternDestroy (pat1);
+        free (buf);
+        return NULL;
+    }
+
+#if 0
+    printd ("emsg name=%s path=%s\n", name, path);
+#endif
+    font = fz_new_font_from_file (ctx, name, (char *) path, 0, 0);
+    FcPatternDestroy (pat);
+    FcPatternDestroy (pat1);
+    free (buf);
+    return font;
+}
 #endif
 
 CAMLprim value ml_init (value csock_v, value params_v)
@@ -4664,7 +4755,7 @@
 #ifdef USE_FONTCONFIG
     if (Bool_val (Field (params_v, 10))) {
         fz_install_load_system_font_funcs (
-            state.ctx, fc_load_system_font_func, NULL
+            state.ctx, fc_load_system_font_func, fc_load_system_font_func_cjk
             );
     }
 #endif
